#!/usr/bin/env ruby
# frozen_string_literal: true

require "bundler/setup"
require "json"
require "simplecov"

ROOT = Dir.pwd
COVERAGE_DIR = File.join(ROOT, "coverage")
COVERAGE_RESULT_PATH = File.join(COVERAGE_DIR, ".resultset.json")
BASELINE_PATH = File.join(ROOT, "config", "coverage_baseline.json")
RAIL_TREES = %w[app/ lib/].freeze

unless File.exist?(COVERAGE_RESULT_PATH)
  abort "Coverage result not found at #{COVERAGE_RESULT_PATH}. Run the test suite with coverage enabled first."
end

result_data = JSON.parse(File.read(COVERAGE_RESULT_PATH))
command_names, coverage = SimpleCov::ResultMerger.merge_valid_results(result_data, ignore_timeout: true)
coverage_result = SimpleCov::ResultMerger.create_result(command_names, coverage)

unless coverage_result
  abort "Unable to load coverage data from #{COVERAGE_RESULT_PATH}. Run the test suite with coverage enabled first."
end

baseline = {}

coverage_result.files.each do |source_file|
  relative_path = source_file.filename.delete_prefix("#{ROOT}/")
  next unless RAIL_TREES.any? { |prefix| relative_path.start_with?(prefix) }

  uncovered_lines = source_file.lines.each_with_object([]) do |line, lines|
    next if line.never? || line.skipped?
    lines << line.line_number unless line.covered?
  end

  baseline[relative_path] = uncovered_lines unless uncovered_lines.empty?
end

File.write(BASELINE_PATH, JSON.pretty_generate(baseline))
puts "Coverage baseline written to #{BASELINE_PATH} (#{baseline.keys.size} files)."
