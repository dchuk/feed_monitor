# frozen_string_literal: true

# Feed Monitor engine configuration for the dummy host app.
# This file is generated by the install generator and tweaked here so the
# integration playground uses all background-processing features.
FeedMonitor.configure do |config|
  # Keep the default namespace so queue names remain stable across environments.
  config.queue_namespace = "feed_monitor"

  # Ensure queues align with Solid Queue workers launched via bin/dev.
  config.fetch_queue_name = "#{config.queue_namespace}_fetch"
  config.scrape_queue_name = "#{config.queue_namespace}_scrape"
  config.fetch_queue_concurrency = 2
  config.scrape_queue_concurrency = 2
  config.scraping.max_in_flight_per_source = 10
  config.scraping.max_bulk_batch_size = 40

  # The dashboard should surface queue metrics in development.
  config.job_metrics_enabled = true

  # Mission Control is mounted in the dummy app; surface the link by default.
  config.mission_control_enabled = true
  config.mission_control_dashboard_path = -> { "/mission_control" }

  # HTTP client mirrors the engine defaults so the dummy app exercises the
  # documented configuration surface while keeping behaviour stable.
  config.http.timeout = 15
  config.http.open_timeout = 5
  config.http.max_redirects = 5

  # Adaptive fetch scheduling mirrors defaults but is left documented here so
  # developers can experiment with accelerated polling windows in the dummy app.
  # config.fetching.min_interval_minutes = 5
  # config.fetching.max_interval_minutes = 1440
  config.fetching.increase_factor = 1.05
  config.fetching.decrease_factor = 0.5
  # config.fetching.failure_increase_factor = 1.5
  config.fetching.jitter_percent = 0.01

  # Example overrides retained for development experimentation.
  # config.http.headers = { "X-FeedMonitor" => "dummy" }
  # config.scrapers.register(:dummy, "Dummy::CustomScraper")
  # config.retention.items_retention_days = 7
  # config.retention.strategy = :soft_delete

  # Model extension examples: mix in a concern, add a reusable validation method,
  # and apply a block-based validation for STI subclasses.
  config.models.source.include_concern "DummyFeedMonitor::SourceExtensions"
  config.models.source.validate :enforce_testing_notes_length
  config.models.source.validate do |record|
    next unless record.is_a?(FeedMonitor::SponsoredSource)
    next if record.fetch_interval_minutes >= 30

    record.errors.add(:fetch_interval_minutes, "must be at least 30 minutes for sponsored sources")
  end

  # Realtime configuration for Turbo Streams via Solid Cable
  config.realtime.adapter = :solid_cable
end
